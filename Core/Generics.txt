
Работа дженериков в Kotlin на базе иерархии Animal:    

	
              Animal
           /         \
         Dog          Cat
       /    \        /   \        
    Taxa   Beagle  Siam  Pers		   

Generics and Subtypes
======================

Основная трабла при работе с дженериками - это subtyping у производных от дженериков ТИПОВ.

Терминология:
-------------

 type parameter: <T>, <in T>, <out T>
 type argument: <Dog>, <in Dog>, <out Dog>
 return types: тип возвращаемого значение

Аналогии с ОБЫЧНЫМИ классами и интерфейсами:
--------------------------------------------

Subtyping у ОБЫЧНЫХ классов и интерфейсов определяется типами аргументов open-функций (argeumеnt type)
и типами возвращаемых значений open-функций (return type).
Набор всех аргументов всех open-функций класса/интерфейса говорит о том, что конкретно он может ПРИНИМАТЬ.
Набор всех return type говорит о том, что конкретно он может ОТДАВАТЬ.

Теперь проведем аналогию с дженериком. У дженерика просто есть набор 'type parameters' и это то, что он может
как принимать так и отдавать: все зависит от прототипов его open-функций. 

interface Generic<T, R> {
    fun insert(t: T)
    fun fetch(): R
}

Для того чтобы строить subtyping на базе производных от дженериков ТИПОВ необходимо однозначно сказать 
компилятору роль каждого type parameter'а дженерика. Это необходимо, чтобы следовать 2-ум правилам subtyping'а
и можно сделать как в месте декларации самого дженерика (Declaration-Site Variance), так и в месте, где
производный от дженерика ТИП фигурирует в качества аргумента какой-то функции (Use-Site variance).

interface Generic<in T, out R> {
    fun insert(t: T): Unit
    fun fetch(): R
}

Разбор полетов: Generic и его производные типы на базе иерархии Animal'ов.
--------------------------------------------------------------------------

interface Group<T> {
	fun insert(item: T): Unit
	fun fetch(): T
}


Covariance
-----------

ПОТРЕБИТЕЛЬ группы - некий доктор ветеринар. Принимает вообще всех животных - Group<Animal>,
а значит и собак - Group<Dog>. То есть мы хотим, чтобы Group<Dog> была подтипом от Group<Animal>.

Просто запишем эти два производных типа и посмотрим на них:

interface Group<Animal> {
	fun insert(item: Animal): Unit
	fun fetch(): Animal
}

interface Group<Dog> {
	fun insert(item: Dog): Unit
	fun fetch(): Dog
}

Видно, что Group<Dog> отдает НЕ БОЛЬШЕ (OK), но принимает МЕНЬШЕ (Error). То есть subtyping НЕ работает. Чо делать ?
Так как доктор - это потребитель (берет из группы), то можно убрать из Group<T> функцию ЗАПИСИ insert(...):

interface Group<T> {
	fun fetch(): T
}

На базе такого дженерика subtyping заработает, нужно только сказать компилятору, что мы хотим subtyping:

interface Group<out T> {
	fun fetch(): T
}

и теперь Kotlin знает, что Group<Dog> можно трактовать как subtype от Group<Animal> и будет проверять, чтобы
мы не добавили в дженерик функцию ЗАПИСИ, где <T> будет стоять в позиции АРГУМЕНТА функции.

Contravariance
--------------

Теперь у нас есть волонтер, который ПРИНОСИТ собак чтобы поместить их в собачий приют - Group<Dog>, но если
будет приют вообще для любых животных - Group<Animal>, то он отдаст собаку и туда. То есть у нас ПОСТАВЩИК собак,
который ЗАПИСЫВАЕТ в Group<Dog>, но может ЗАПИСЫВАТЬ и в Group<Animal>. Мы хотим, чтобы Group<Animal> была
subtype'ом Group<Dog>.

Просто запишем эти два производных типа и посмотрим на них:

interface Group<Dog> {
	fun insert(item: Dog): Unit
	fun fetch(): Dog
}

interface Group<Animal> {
	fun insert(item: Animal): Unit
	fun fetch(): Animal
}

Видно, Group<Animal> ПОЛУЧАЕТ НЕ МЕНЬШЕ (OK), но ОТДАЕТ БОЛЬШЕ (Error). Учитывая, что волонтер только ПОСТАВЛЯЕТ
собак (кладёт в группу), то можно убрать из дженерика функцию чтения и все будет ОК. Нужно только компилятору сказать,
что мы хотим строить на базе дженерика КОНТРвариантый subtyping.

interface Group<in T> {
	fun insert(item: T): Unit
}

Это все зашибись, но что делать если мы на базе одного дженерика хотим получить и Covariance и Contravariance ?

Итак, Kotlin позволяет использовать GENERIC SUBTYPING в ДВУХ вариантах:

1. Declaration-site variance - это когда мы сразу при декларации дженерика накладываем ограничения на область
   применения его type parameter'ов, например <out T>
2. Use-site variance - это когда мы накладываем ограничения на область применения его type ARGUMENT'ов в месте
   использования ИНСТАНСА на базе дженерика - и именно здесь включается механизм 'Type Projection'.
   
Вариант 1: (в этом случае Kotlin будет следить, чтобы T не появилась в неправильной позиции)
---------

interface Group<out T> {
	fun fetch(): T
}

Вариант 2 (Type Projection).
---------

fun readDogs(group: Group<out Dog>) {
	println( group.fetch() )
}

fun writeDogs(group: Group<in Dog>) {
	group.insert(Dog())
}   

Type Projection - это автоматически генерируемый тип, определенным образом ограниченный, чтобы соблюдались ОБА
правила subtyping'а. Projection - это как проекция. Например тень 3-х мерного объекта на стене - вроде похоже,
но не совсем то )) Так и с типом - часть возможностей становятся недоступны, отключены. Тип, сгенеренный с помощью
Type Projection, относится только к конкретной переменной (переменная group выше) и работает в области её видимости.

Указав для переменной group тип 'type_projection_Group<out Dog>' мы фактически создали в этом месте кода
декларацию вот такого projection-типа:

interface Group<out Dog> {
    override fun insert(t: Nothing)
    override fun fetch(): Dog
}

NOTE: Это значит, что Group<out Dog> КОВАРИАНТНА при использовании subtyp'ов от Dog.

А для типа 'type_projection_Group<in Dog>' мы создали вот такую конструкцию:

interface Group<in Dog> {
    override fun insert(t: Dog)
    override fun fetch(): Any?
}

NOTE: Это значит, что Group<in Dog> КОНРВАРИАНТНА при использовании supertype'ов Dog'а.

То есть передав в readDogs аргумент Group<Beagle> вместо Group<Dog> мы ничего не нарушим, потому что 
при ЧТЕНИИ из Group<Beagle> мы НЕ ИЗВЛЕЧЁМ БОЛЬШЕ чем при чтении из Group<Dog>.

Точно также передав в writeDogs аргумент Group<Animal> вместо Group<Dog> мы тоже ничего не нарушим, потому что
при ЗАПИСИ в Group<Animal> она готова ПРИНЯТЬ БОЛЬШЕ чем принимает Group<Dog>.

Благодаря Type Projection обе функции в интерфейсе сохранились, но в зависимости от указанной вариантности
принудительно изменяются их прототипы. И у нас появляются следующие возможности:

	val animalGroup = object : Group<Animal> {....}
	
	val dogGroup = object : Group<Dog> {....}
	
	val beagleGroup = object : Group<Beagle> {....}
	
Допустимо:
----------
    writeDogs(dogGroup)
    readDogs(dogGroup) -> Здесь везде Dog, значит ничего не нарушаем.

    readDogs(dogGroup)
    readDogs(beagleGroup) -> вместо Group<Dog> можно подставить Group<Beagle> и это ОК, потому что с помощью <out Dog>
	                        мы указали на КОвариантность и Group<Beagle> 'ОТДАЕТ' меньше предка Group<Dog>.
	
    writeDogs(dog)
    writeDogs(animal) -> вместо Group<Dog> можно подставить Group<Animal> и это ОК, потому что с помощью <in Dog> 
	                     мы указали на КОНТРвариантность и Group<Animal> 'ПРИНИМАЕТ' больше предка Group<Dog>.
	
Недопустимо:
------------
	readDogs(animal) -> Group<Animal> 'ОТДАЕТ' больше, чем Group<Dog> значит не является её subtype'ом,
	                    а readDogs расчитана на КОвариантные аргументы.
						
	writeDogs(beagle) -> Group<Beagle> 'ПРИНИМАЕТ' меньше, чем чем Group<Dog> значит не является его subtype'ом,
	                     а writeDogs расчитана на КОНТРвариантные аргументы.

Итак, явно задав вариантность в месте использования ТИПА на базе дженерика мы получаем 'кастрированный' тип, который
становится как бы 'опорным или базовым' для оценки отношений subtype/supertype при подстановке в это место каких-то
реальных инстансов на базе того же дженерика. Подстановка будет валидной, если соответствует указанной вариантности.


accept every possible kind of a particular generic - such as every possible Group
---------

Star Projection относится к случаям когда дженерик используется как аргумент функции, то есть когда надо
его ПРИНИМАТЬ. Есть 3 варианта использования.

Напомню, что есть некий дженерик

interface Group<T> {
  fun insert(item: T): Unit
  fun fetch(): T
}

Мы хотим чтобы некая функция someProc могла в аргументом принимать любой ТИП на базе этого дженерика. То есть
если любой тип будет подходить, то значит все они являются наследником какого-то super-ТИПА, который нужно определить
и поставить аргументом в прототип функции.

fun someProc(superGroup : SuperGroup) {...}

То есть задача сводится к тому, чтобы наговнякать этот супертип !


interface SuperGroup {
    fun insert(item: Nothing): Unit
    fun fetch(): Any? 
}

Но к сожалению не получится просто взять, задекларировать такой супертип, а потом наследоваться от него. Не получится
по той причине, что Kotlin не поддерживает Contravariance в аргументах функций при наследовании обычных классов и 
интерфейсов. То есть функция insert не может быть override с указанием аргумента item: Dog или чего-то ещё.





Отдельно по Type Projection:
----------------------------

Напомню - применяется в месте использования инстанса на базе дженерика. При этом в этом месте использования генерится
специальный суррогатный тип, который становится как бы базовым для оценки subtype'а в отношении реально подставляемых
значений. Реально подставляемые значение должны быть реальными subtype'ами, то есть удовлетворять 2-ум правилам.

Когда делаем out-projection, то все функции суррогатного типа, которые в дженерике ПРИНИМАЛИ 'type parameter', начинают
принимать Nothing. Соответственно subtype всегда примет НЕ МЕНЬШЕ. 

Когда делаем in-projection, то все функции суррогатного типа, которые в дженерике ВОЗВРАЩАЛИ 'type parameter', начинают
возвращать Any?. Соответственно subtype всегда вернет НЕ БОЛЬШЕ. 

Запомнинаем, что:
----------------

In-projections делает 'return types' как Any?
Out-projections делает 'argument types' как Nothing

И теперь пара трюков. Допустим есть функция, которая использует Group<T> и выполняет с ней чтение/запись.

	fun useGroup(group: Group<...>) {...}

Если мы вот так укажем type projection: 

    fun useGroup(group: Group<in Nothing>) {...}  ИЛИ  fun useGroup(group: Group<out Any?>) {...}

то получим вот такие АБСОЛЮТНО ОДИНАКОВЫЕ суррогаты:
	
    interface Group<in Nothing> {                       interface Group<out Any?> {
      fun insert(item: Nothing): Unit                     fun insert(item: Nothing): Unit
      fun fetch(): Any?                                   fun fetch(): Any? 
    }                                                   }
	
	
Вот они 3 способа для star projection:

- in-projection		- <in Nothing>
- out-projection	- <out Any?>
- star-projection	- <*>	

Kotlin позволяет использовать любое написание, но стандартом считается <*>.



