Короче, если объект используется в качестве КЛЮЧА в hashMap'е, то у него необходимо
одновременно переопределять и equsls и hashcode, потому что при поиске ключа в
hashMap'е (при "переборе" этих ключей) сравниваются результаты обоих методов !!!


NOTE: метод equals по умолчанию просто сравнивает указатели на объекты, определяя, ссылаются ли они на один и тот же объект.

Метод equals() необходим в Java для подтверждения или отрицания того факта, что два объекта одного происхождения 
являются логически равными. То есть, сравнивая два объекта, программисту необходимо понять, эквивалентны ли их значимые поля.
Не обязательно все поля должны быть идентичны, так как метод equals() подразумевает именно логическое равенство.

Когда не стоит переопределять этот метод
----------------------------------------

- Когда каждый экземпляр класса является уникальным.
- Когда на самом деле от класса не требуется определять эквивалентность его экземпляров.
  Например java.util.Random
- Когда класс, который вы расширяете, уже имеет свою реализацию метода equals и поведение
  этой реализации вас устраивает.

Контракт hashCode
------------------
Вызов метода hashCode над двумя объектами должен всегда возвращать одно и то же число, если эти 
объекты равны (вызов метода equals для этих объектов возвращает true).

Переопределяя в своем коде метод equals, необходимо всегда переопределять и метод hashCode. 
Так как фактически два экземпляра класса отличаются, потому что находятся в разных областях памяти, 
сравнивать их приходится по некоторым логическим признакам. Соответственно, два логически 
эквивалентных объекта, должны возвращать одинаковое значение хэш-функции.

equals есть, hashCode нет
--------------------------
Тогда с точки зрения метода equals два объекта будут логически равны, в то время как с точки зрения 
метода hashCode они не будут иметь ничего общего. И, таким образом, помещая некий 
объект в хэш-таблицу, мы рискуем не получить его обратно по ключу.

hashCode есть, equals нет.
--------------------------
см начало файла.










