getViewByPosition()
======================
Порядок поиска ViewHolder'а:

1. Просмотр Changed scrap 						(поиск по position)
2. Просмотр Attached scrap 						(поиск по position)
3. Просмотр Non-removed hidden views 			(поиск по position)
4. Просмотр view cache 							(поиск по position)
5. Stable IDs (???)
6. Просмотр ViewCacheExtension 					(поиск по position)
7. Просмотр RecycledViewPool 					(поиск по viewType)
8. Если ничего не найдено, то onCreateViewHolder() -> onBindViewHolder()

RecycledViewPool (RecyclerView.Recycler.RecycledViewPool)
**********************************************************
Построен на базе SparseArray: ключом является Int (view type), значением - ViewHolder
для данного view type. То есть для каждого view type свой пул ViewHolder'ов, каждый работает
как FIFO. По умолчанию их размеры - 5 элементов, но можно изменить:

recyclerView.getRecycledViewPool().setMaxRecycledViews(SOME_VIEW_TYPE, POOL_CAPACITY)

Пул нужен чтобы получить dirty ViewHolder нужного view type.

Чтобы получить доступ к пулу: recyclerView.getRecycledViewPool()
Чтобы установить СВОЙ пул: recyclerView.setRecycledViewPool(pool)
Очистить пул: clear()
Получить из пула diirty холдер: getRecycledView(viewType)
Поместить в пул ViewHolder: putRecycledView(holder) (не рекомендуется использовать для самостоятельного создания холдеров)
NOTE: можно создать один инстанс пула и использовать его в разных RecycleViews.

Как попасть в RecycledViewPool
------------------------------
1. View покидает границы RecyclerView из-за прокрутки
2. Изменилась модель: видимый элемент удалили или вставили новый, который вытеснил видимый.
3. ViewHolder удаляется из кэша.
4. Если ViewHolder найден в кэше по position, но имеет неправильный viewType
5. Если ViewHolder использовался в pre-layout, но оказался не востребованным в post-layout.






Набор полезных методов
==========================

RecyclerView::getChildViewHolder(view) - получить ViewHolder child'a

ViewHolder::setIsRecyclable(Boolean) - указываем может ли холдер утилизироваться. Во время
анимации система отключает у холдера такую возможность.

View::setHasTransientState(Boolean) - View в переходном состоянии (например таже анимация) и
не рекомендуется обновлять её контент. Причем этот признак передается от вложенного child'а
вверх до родителя и вся ViewGroup находится в этом состоянии. ViewHolder следит за этим
флагом у своего itemView и если состояние переходное, то холдер не может утилизироваться.

ViewHolder::onFailedToRecycledView(Boolean) Если по одной из 2-х указанных причин холдер 
не может утилизироваться, то возникает ошибка с вызовом этого метода. Если вернуть true,
то холдер будет принудительно утилизирован.

Adapter::onViewRecycled(ViewHolder) - холдер успешно утилизирован. Можно освобождать ресурсы
и отписываться от Rx.


Adapter
-------
Adapter::onAttachedToRecyclerView - адаптер подключился к RecycleViews
Adapter::onDetachedFromRecyclerView(RecyclerView) - RecycleViews больше не следит за адаптером
Adapter::onViewDetachedFromWindow(ViewHolder)
Adapter::onViewAttachedToWindow(ViewHolder)

onViewRecycled
