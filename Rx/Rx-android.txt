Самое главное в RX - вовремя отписаться.
========================================

В обязанности Observable входит проверять статус подписчика, и если он отписался, то не слать ему более никаких событий.
А подписчик, со своей стороны должен отписываться, если данные ему больше не нужны. Иначе Observable будет хранить 
ссылку на подписчика и это может привести к утечке памяти, т.к. подписчик может запросто хранить неявную ссылку на Activity.

При подключении нового наблюдателя будет заново запущена лямда .create{...}, то есть данные для нового подписчика
будут генериться заново.


Пример правильно написанного Observable:
----------------------------------------

        Observable.create<Int> { consumer ->

            (0..10).toList().forEach { i ->
                if(!consumer.isDisposed) consumer.onNext(i)
                else return@create
            }
            if(!consumer.isDisposed) consumer.onComplete()
        }


Cold Observable - это Observable описанный выше. Ничего не генерит пока нет подписчика.
---------------

Hot Observable - создается из Cold Observable методом 
---------------

	val hotObs = coldObs.publish()

Фактически coldObs в методе publish() создаст ещё один Observable, поместит в него ссылку на себя и вернет в val hotObs.
Теперь на hotObs мы можем выполнить метод hotObs.connect(), который внутри hotObs сделает coldObs.subscribe() и начнется эмиссия данных.
Теперь hotObs просто ретранслирует слева вправо всю эмиссию от coldObs всем своим подписчикам.

Вместо publish() можно использовать replay(). Тогда новые подписчики получат данные с самого начала. Для такого функционала 
используется кэширование (Внимательно !)








