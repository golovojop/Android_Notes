
Kotlin compareBy
=============================

// Чтобы сделать СВОЙ класс "сравниваемым"

interface Comparable<T> {
	int compareTo(T other);
}

// Чтобы сравнивать ЧУЖИЕ классы (которые либо не Comparable либо Comparable, но не по тому критерию, который нам нужен)

interface Comparator<E> {
	int compare(T a, T b);
}


Собственно compareBy:
---------------------

fun <T> compareBy(
    vararg selectors: (T) -> Comparable<*>?
): Comparator<T>


Comparator, возвращаемый из compareBy, последовательно вызывает selectors.

	int compare(T a, T b) {
	
		for(i = 0; i < selectors.size, i++) {
		
			val comparableA = selectors[i](a)
			val comparableB = selectors[i](b)
			
			val result = comparableA.compareTo(comparableB)
					
			if(result != 0) return result
		}
	}

	
То есть все элементы сканируемой коллекции конвертируются в Comparable функцией-селектором,
а затем просто сравниваются как два Comparable. И если результат не 0, то сравнение выполнено.

Сортировка по нескольким полям:
-------------------------------

	unsortedList.sortedWith(compareBy<Person> { it.age }.thenBy { it.name }.thenBy { it.address })

NOTE: У compareBy нужно явно указывать тип сравниваемых данных <Person>, иначе thenBy не смогут работать.

И ещё один нюанс: thenBy сравнивает по name только внутри групп элементов, которые имеют равные age.
То есть если у всех age разный, то thenBy { it.name } нечего будет сранивать.


	


	


