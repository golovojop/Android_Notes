Время жизни компонента - это время жизни ссылки на него. Если создаем компонент в Application 
(Applciation.onCreate) и храним ссылку в Application, то он живет все время вместе с программой. 
Если создаем компонент в коде Activity (Activity.onCreate), то и время жизни его ограничено 
временем жизни Activity. Когда Activity закроется, то GC удалит и компонент, а при следующем
создании Activity будет создан новый инстанс компонента. Так вот время жизни компонента и 
является его Scope'ом.

Если нам нужно, чтобы компонент при запросе некого объекта всегда отдавал нам один и тот же
инстанс (а не плодил новые), то мы в МОДУЛЕ помечаем соотв provide-метод @Scope-аннотацией и
сам компонент помечаем @Scope-аннотаций. Это приводит к тому, что компонент один раз получает 
от модуля интстанс и хранит его. Имя @Scope-аннотации можно задать самому, чтобы он выглядело
информативно, например @ActivityLifeCyrcleScope, тогда взглянув на код модуля и компонента сразу
понятно для чего она сделана.

В итоге @Scope-аннотация (или её кастомный аналог) - это способ указать компоненту, что нужно
хранить у себя один инстанс объекта и тогда, например, активити вместе со всеми своими фрагментами
будут пользоваться одним и тем же объектом.

