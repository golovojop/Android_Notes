private void measureChildWithDecorationsAndMargin(View child, int widthSpec, int heightSpec)
----------------------------------------------------------------------------------------------

На вход этого метода мы передаем размеры того пространства на экране, которое мы ему выделяем.
Это пространство включает как сам элемент, так и его маргины и инсеты, которые добавит декоратор.

Поэтому, чтобы определить размер непосредственно самой view мы должны вычесть из входных размеров
величины инсетов.


public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state)
-----------------------------------------------------------------------------------------
Вызывается всякий раз когда нужно переместить элементы в списке, короче когда нужно
отреагировать на скрол. Рекомендуется при каждом таком вызове "откреплять" все дочерние
виьюхи, отдавать их в кэш recycler'а, а потом брать оттуда по одной и заново размещать.

NOTE: Вообще операция layout - это просто позиционирование "внешнего" контура вьюхи.
Внешний контур включает в себя как саму вьюху, так и её маргины и прочие инсеты, например
инсеты декоратора. И вот мы в операции layout просто определяем координаты этого прямоугольного контура.


public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state)
------------------------------------------------------------------------------------------------

Задача метода - проскролить контент. На вход прилетает dy - величина на которую нужно скролить,
знак этой величины определяет направление скрола (dy < 0 - палец движется ВНИЗ),
(dy > 0 - палец движется ВВЕРХ). Немного странно, потому что это противоположно экранным
осям координат, которые направлены вниз. Однако знак dy нужен только, чтобы показать направление.
Реальный скрол выполняется с "инверсированным" значением dy в методе offsetChildrenVertical, который
вызывается вот так:

offsetChildrenVertical(- dy)


NOTE: getDecoratedMeasuredWidth/getDecoratedMeasuredHeight

Возвращает размер самой view + размеры инсетов с обеих сторон (или сверху снизу)


Есть ещё один момент по поводу addView и attachView. 

addView - это стандартный метод помещения view в ViewGroup. View становится членом иерархии группы.

attachView - это метод относится к тому как LayoutManager взаимодействует с Recycler'ом и его кэшами.

Единственно, что мне не понятно - это почему после addView надо делать measure и layout, а после 
attachView этого не делается. 

МЛЯ - потому что attachView аттачит уже измеренную и лэйаутную view из кэша.

