Имеется много разных Behavior, но можно выделить несколько основных, которые доступны 
нам для непосредственного использования и расширения.

Всегда нужно помнить и иметь ввиду, что Behavior работают "горизонтально", то есть 
позволяют реагировать НЕПОСРЕДСТВЕННЫМ наследникам CoordinatorLayout
на действия других НЕПОСРЕДСТВЕННЫХ наследников CoordinatorLayout. 

====================================================================================
Это дефолтовое поведение для самой AppBarLayout, то есть нам его не следует
расширять для своих виджетов.

	AppBarLayout.Behavior 

====================================================================================
Behavior which should be used by View which can scroll vertically and support nested
scrolling to automatically scroll any AppBarLayout siblings.

Этот Behavior можно применять к элементам со скроллингом и/или к элементам с поддержкой 
вертикального NESTED scrolling
которые должны своим скроллингом влиять на AppBarLayout. То есть AppBarLayout
будет меняться при прокрутке в нашем виджете. Проверено.

	AppBarLayout.ScrollingViewBehavior

====================================================================================
Какое-то стандартное поведение, которое применяется к прямым наследникам CoordinatorLayout
чтобы придать им функционал bottom sheet'а. В исходнике нет метода layoutDependsOn
и видимо для переопределения под свои нужды не особо подходит.

	BottomSheetBehavior<V extends View>

====================================================================================
Стандартное поведение для FloatingActionButton заточенное на реакцию появления/скрытия
Snackbar'а. Также встроена некоторая интеграция с AppBarLayout и BottomSheetBehavior,
а именно через метод setAutoHideEnabled(boolean autoHide) можно указать будет ли
скрываться FAB при нехватке места. 

Видимо не стоит под свои нужды переопределять этот Behavior, а если хочется создать
для FAB свой Behavior, то лучше это сделать через CoordinatorLayout.Behavior

	FloatingActionButton.Behavior

====================================================================================
Поведение для прямых наследников CoordinatorLayout для поддержки жеста swipe-to-dismiss.

Я попробовал его применить к прямому наследнику CoordinatorLayout и оно работает.
Однако существует проблема в правильном позиционировании такого потомка на экране.
Для правильного позиционирования нужно поведение AppBarLayout.ScrollingViewBehavior
или его производных, но мы не можем применить сразу два поведения к виджету. Я полагаю
что использовать SwipeDismissBehavior нужно не с элементами, которые на первом уровне 
иерархии внутри активити, а где-то глубже. Ведь CoordinatorLayout можно использовать
и внутри LinearLayout и внутри дугих ViewGroup. И функцилнал Behavior там остается.
Вот тому пример: https://bit.ly/2n3dzEm

	SwipeDismissBehavior<V extends View>.

====================================================================================
Стандартная "болванка" для реализации своего Behavior

	CoordinatorLayout.Behavior

====================================================================================
