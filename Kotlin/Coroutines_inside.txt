	package s.yarlykov.izisandbox.threads.coroutine;

=======================================================================
 Смотрим как реализована корутина под капотом для такого кода:
 

fun main() {

    val scope = CoroutineScope(Job())

    scope.launch {
        println("parent coroutine, start")

        //val timeout1 = Random.nextLong(1000, 3000)
        //val timeout2 = Random.nextLong(1000, 3000)

        val job1 = launch {
            TimeUnit.MILLISECONDS.sleep(1500)
            println("job1 completed ${Thread.currentThread().name}")
        }

        val job2 = launch {
            TimeUnit.MILLISECONDS.sleep(1000)
            println("job2 completed ${Thread.currentThread().name}")
        }

        println("parent coroutine, wait until children complete ${Thread.currentThread().name}")
        job1.join()
        job2.join()

        println("parent coroutine, end ${Thread.currentThread().name}")
    }

    Thread.sleep(5000)
}
=======================================================================


@Metadata(
   mv = {1, 4, 1},
   bv = {1, 0, 3},
   k = 2,
   d1 = {"\u0000\b\n\u0000\n\u0002\u0010\u0002\n\u0000\u001a\u0006\u0010\u0000\u001a\u00020\u0001¨\u0006\u0002"},
   d2 = {"main", "", "iZiSandbox.app"}
)
public final class CoroutineSamplesKt {

   public static final void main() {
   
   === Корневой Scope для запуска родителькой корутины ===
      CoroutineScope scope = CoroutineScopeKt.CoroutineScope((CoroutineContext)JobKt.Job$default((Job)null, 1, (Object)null));
	                 ------
      BuildersKt.launch$default(scope, (CoroutineContext)null, (CoroutineStart)null, (Function2)(new Function2((Continuation)null) {
	=== Это внутри декларации тела Function2, поэтому глобальные переменные получают дефолтовые значения ===
	                                                                                           
         // $FF: synthetic field
         private Object L$0;
         int label; ==========================> (default = 0)

	=== Стартует родительская корутина (лямда после launch) ===============
         @Nullable
         public final Object invokeSuspend(@NotNull Object $result) {
		                     -------------
            StringBuilder var10000;
            Thread var10001;
            String var5;
            boolean var6;
            label17: {
               Object var7 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
			   
               Job job2;
			   
               switch(this.label) {
			   ------------------
               case 0:
			   --------
                  ResultKt.throwOnFailure($result);
				  
	             === Каждый билдер (launch) создает свою Scope, которая станет родительской для вложенных корутин.				  
				 
                  CoroutineScope $this$launch = (CoroutineScope)this.L$0; ====> создается scope родительской корутины
                  String var3 = "parent coroutine, start";
                  boolean var9 = false;
                  System.out.println(var3);

	               === Создается первая дочерняя корутина ===============				  
	
	Обрати внимание - BuildersKt.launch$default где-то внутри себя запустит на выполнение Function2
	в отдельном потоке и вернет управление родительской корутине. Function2 будет выполняться самостоятельно
	и заблокирует свой поток в sleep()
	
                  Job job1 = BuildersKt.launch$default($this$launch, (CoroutineContext)null, (CoroutineStart)null, (Function2)(new Function2((Continuation)null) {
				                        -------------                                                                         -----
                     === Это внутри декларации Function2 дочерней корутины. Здаесь свой label									
                     int label; ==========================> (default = 0)

					 === Стартует дочерняя корутина ===============
                     @Nullable
                     public final Object invokeSuspend(@NotNull Object var1) {
                        Object var4 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
						
                        switch(this.label) {
                        case 0:
                           ResultKt.throwOnFailure(var1);
                           TimeUnit.MILLISECONDS.sleep(1500L);
                           StringBuilder var10000 = (new StringBuilder()).append("job1 completed ");
                           Thread var10001 = Thread.currentThread();
                           Intrinsics.checkNotNullExpressionValue(var10001, "Thread.currentThread()");
                           String var2 = var10000.append(var10001.getName()).toString();
                           boolean var3 = false;
                           System.out.println(var2);
                           return Unit.INSTANCE; ===========> Возврат из дочерней корутины
						   ----------------------
                        default:
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                     }

                     @NotNull
                     public final Continuation create(@Nullable Object value, @NotNull Continuation completion) {
                        Intrinsics.checkNotNullParameter(completion, "completion");
                        Function2 var3 = new <anonymous constructor>(completion);
                        return var3;
                     }

                     === Это запуск выполнения Function2, то есть всего кода дочерней корутины
                     public final Object invoke(Object var1, Object var2) {
                        return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
                     }
                  }), 3, (Object)null);  ======= END OF Job job1
				  
                  === Создается вторая дочерняя корутина ===============				  
				  
                  job2 = BuildersKt.launch$default($this$launch, (CoroutineContext)null, (CoroutineStart)null, (Function2)(new Function2((Continuation)null) {
                     int label;

                     @Nullable
                     public final Object invokeSuspend(@NotNull Object var1) {
                        Object var4 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                        switch(this.label) {
                        case 0:
                           ResultKt.throwOnFailure(var1);
                           TimeUnit.MILLISECONDS.sleep(1000L);
                           StringBuilder var10000 = (new StringBuilder()).append("job2 completed ");
                           Thread var10001 = Thread.currentThread();
                           Intrinsics.checkNotNullExpressionValue(var10001, "Thread.currentThread()");
                           String var2 = var10000.append(var10001.getName()).toString();
                           boolean var3 = false;
                           System.out.println(var2);
                           return Unit.INSTANCE;
                        default:
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                     }

                     @NotNull
                     public final Continuation create(@Nullable Object value, @NotNull Continuation completion) {
                        Intrinsics.checkNotNullParameter(completion, "completion");
                        Function2 var3 = new <anonymous constructor>(completion);
                        return var3;
                     }

                     public final Object invoke(Object var1, Object var2) {
                        return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
                     }
                  }), 3, (Object)null); ======= END OF Job job2
				  

				  ===== Это код формирования строки с имененем потока для логов =====
				  
                  var10000 = (new StringBuilder()).append("parent coroutine, wait until children complete ");
                  var10001 = Thread.currentThread();
                  Intrinsics.checkNotNullExpressionValue(var10001, "Thread.currentThread()");
                  var5 = var10000.append(var10001.getName()).toString();
                  var6 = false;
                  System.out.println(var5);
				  
				  
                  this.L$0 = job2;
				  
				  
                  this.label = 1; ====================== > Следующий label в родительской корутине
				  
				  === Проверка, что дочерняя корутина job1 ушла в COROUTINE_SUSPENDED
				  
				  === NOTE: Тут интересный момент. Job.join() не имеет аргументов, однако здесь передается
				  === this. Это тот самый неявный аргумент this, который всегда передается в нестатическую функцию.
				  
				  === Однако остался вопрос с результатом работы join. Дело в том, что она возвращает Unit, а здесь
				  === проверка на ревество с COROUTINE_SUSPENDED, которая Int.
				  
                  if (job1.join(this) == var7) {
				           =====
                     return var7;
                  }
				  === То есть если job1 не COROUTINE_SUSPENDED то выходим из switch и ...
				  
                  break;      => Созданы две дочерние корутины внутри label == 0, ставим label = 1 и выходим из switch
				  
               case 1:
                  job2 = (Job)this.L$0;
                  ResultKt.throwOnFailure($result);
                  break;
               case 2:
                  ResultKt.throwOnFailure($result);
                  break label17;
               default:
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               this.L$0 = null;
			   
               this.label = 2;
			   
               if (job2.join(this) == var7) {
			            =====
                  return var7;
               }
            }

			===== Это код формирования строки с имененем потока для логов =====
				  
            var10000 = (new StringBuilder()).append("parent coroutine, end ");
            var10001 = Thread.currentThread();
            Intrinsics.checkNotNullExpressionValue(var10001, "Thread.currentThread()");
            var5 = var10000.append(var10001.getName()).toString();
            var6 = false;
            System.out.println(var5);
			
			
            return Unit.INSTANCE;
			
         } === end of invokeSuspend родительской корутины.

         @NotNull
         public final Continuation create(@Nullable Object value, @NotNull Continuation completion) {
            Intrinsics.checkNotNullParameter(completion, "completion");
            Function2 var3 = new <anonymous constructor>(completion);
            var3.L$0 = value;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }
      }), 3, (Object)null);
      Thread.sleep(5000L);
   }
   
   === Итак, видно следующее:
   родительская корутина стратует свою invokeSuspend в отдельном потоке. Далее она запускает
   два лончера, которые выполняют свою работу (запускают дочерние корутины в отдельных потоках)
   и сразу возвращаются. Затем происходит два join.
   
   Пока не понятно как родительская корутина ждет на join'ах. Такое ощущение, что это
   какой-то аналог Observable.merge: onComplete выдается когда последний источник onComplete.
   В общем нужно поразбираться ещё.
   

   // $FF: synthetic method
   public static void main(String[] var0) {
      main();
   }
}
