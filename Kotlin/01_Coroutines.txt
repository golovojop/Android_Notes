Job
======

Job - создается иерархическая модель Job'ов для поддержания structured concurrency. А именно:
на верху иерархии Job Scoupe'а, а ниже - Job'ы дочерних корутин и их жочерних корутин.

По связям между Job'ами проходят следующие сообщения:

- вверх к корневому: сообщения об Exceptions.
- вниз команды Cancel.

NOTE: Если корутина отменена, ее код продолжает выполняться, только isActive становится false 
и вызов suspend функций будет выбрасывать CancellationException.

Context
========
Context - это собственно контекст выполнения корутины. Его состав определяется составом контекста
родительской корутины и собственными параметрами, которые переопределяют параметры родительской корутины.


Continuation
==============

В оригинале выглядит вот так:

public interface Continuation<in T> {
    /**
     * The context of the coroutine that corresponds to this continuation.
     */
    public val context: CoroutineContext

    /**
     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the
     * return value of the last suspension point.
     */
    public fun resumeWith(result: Result<T>)
}


По сути (может быть ошибаюсь) это обертка вокруг Function2. Function2 выступает в роли 


Object Function2(Object var1, Object var2) {
	Object invoke(Object var1, Object var2) ==> запуск Function2 на выполнение
	
	Continuation create(@Nullable Object value, @NotNull Continuation completion)
	Object invokeSuspend(@NotNull Object var1)
}


Билдер корутины
---------------


fun Scope.builderProc(coroutineCode : Scope.(Any) -> Any) : Job

Билдер создаст новую Scope и на ней запустит код корутины, которые есть coroutineCode.

Continuation
=============

Корутина упаковывается в Continuation-класс: это просто наследник интерфейса SuspendLambda.
Код, указанный выше как параметр билдера ( op: ...), попадет внуть invokeSuspend. 

interface SuspendLambda {
	fun invokeSuspend(any : Any?)
}

Общий вид алгоритма (в Java):
-----------------------------

Прототип suspend-функции: fun suspendProc(..., c: SuspendLambda)


int label = 0;

fun invokeSuspend(Object result) : Object {
    switch (label) {
        case 0: {
            label = 1;
 
            suspendProcA(..., this); 	// suspend function
            if(suspended) return COROUTINE_SUSPENDED	
        }
        case 1: {
            label = 2;
 
	    suspendProcB(..., this); 	// suspend function
            if(suspended) return COROUTINE_SUSPENDED	
        }
        case 2: {
            toast("OK");
            return result
        }
    }
}

Задача suspendProc - запустить какую-нибудь асинхронную работу (например, создать rx-подписку) и СРАЗУ вернуть управление.
Когда подписка сработает, то invokeSuspend будет вызвана снова, благодаря аргументу this в suspendProc. То есть invokeSuspend
вызывается НЕ рекурсивно, а последовательно, после того как сработает подписка очередной suspendProc. Получается такой
конвеер из suspendProc.

NOE: Вызвать suspend функцию мы можем только в корутине или в другой suspend функции, но не в обычном коде !!!

По уроку 4:
Получается, что invokeSuspend всегда вызывается из Continuation.resume. Даже самый первый раз.

По уроку 7
----------

Оказывается в Android Architecture components уже встроены элементы для поддержки корутин. 
В частности в LifeCyrcleOwner и ViewModel есть Scope'ы для корутин.

 ViewModel or LifeCyrcle
 -> SCOPE (ViewModelScope, LifecycleScope):
     -> Context
	-> JOB Parent
	  -> Job1
	  -> Job2
	  -> Job...

Также Scope можно создать самостоятельно.


Из чего состоит Context:
========================

-> Job (механизм иерархической связности корутин)
-> CoroutineDispatcher (выбор потока)
-> CoroutineName (строковое имя корутины)
-> CoroutineExceptionHandler (обработчик неперехваченных исключений.)


По уроку 10.
-----------------------
Companion object внутри класса может быть именованным или нет.
ИМЯ КЛАССА, используемое САМО ПО СЕБЕ (а не как часть составного имени какого-нибудь qualifier'а),
действует как ссылка на companion object (именованного или неименованного). Ниже увидим пример, а также :
https://kotlinlang.org/docs/object-declarations.html#companion-objects

Теперь по корутинам. Context 'представляется' в виде Map'ы благодаря своему 'operator fun get'.

interface CoroutineContext
	operator fun <E : Element> get(key: Key<E>): E?
	operator fun plus(context: CoroutineContext): CoroutineContext

interface Element : CoroutineContext		
	==> Элемент Map'ы контекста

interface Key<E : Element>					
	==> Ключ Map'ы контекста. Однозначная привязка ТИПА ключа к ТИПУ элемента. То есть
		ключ конкрентного типа может относится только к элементу конкрентного типа.

interface Job : CoroutineContext.Element ==> Отдельный элемент, хранимый в Map'е

А вот реализация ключей и доступа к Map'е. Мы видим, что Job может храниться в Map'е, потому что
он является Element'ом. Также мы видим, что внутри Job задекларирован соответствующий Key
для него. А как говорилось выше, для ссылки на companion object мы можем использовать имя
внешнего класса, то найти Job в контексте можно вот так:

  val job = coroutineContext[Job]   Куль !!!

interface Job : CoroutineContext.Element {
	companion object Key : CoroutineContext.Key<Job> {
		. . . .
	}
}
	
По уроку 11.
-----------------	

Нужно помнить, что  join(), await() и delay() - этот suspend-функции. То есть они запускают свой основной код в каком-то потоке
и возвращают управление в родительскую корутину. Например такой код:

Loop@ scope.launch {

 val job1 = launch {...}
 val job2 = launch {...}
 
 job1.join()
 // return to Loop@
 
 job2.join()
 // return to Loop@
 
 ...some code

}

После первого join выходим из корневого launch, НО СНОВА ВЕРНЕМСЯ когда job1 завершится. Вернувшись запускаем второй join и снова выходим из launch,
НО СНОВА ВЕРНЕМСЯ когда job2 завершится. Если job2 уже будет завершена к моменту завершения job1, то сразу проскочим вниз на 'some code'.
В общем каскад из нескольких join приводит к тому, что время его преодаления равно времени самого долгого job'а.

NOTE: Нужно отличать потоки в которых запускается и завершается сама корутина и потоки в которых выполняются suspend-функции.
Это вещи разные. Ниже описаны диспетчеры для потоков самих корутин.

NOTE: Билдер launch создает корутину и отдает ее (то есть лямду с кодом) диспетчеру. Диспетчер кладет корутину в очередь заданий,
откуда она будет взята в работу одним из потоков этого диспетчера.

Dispatchers.Default - пул потоков. Количество потоков равно количеству ядер процессора. Подходит для вычислений.

Dispatchers.IO - пул потоков. Лимит на потоки равен 64 (или числу ядер процессора, если их больше 64). Подходит для IO.

Отличие пулов в том, что можно одновременно запустить много IO операций и они в основном ждут. А вычислительные операции
херачат. Поэтому вычислительных операций должно быть мало, чтобы не засрать ЦП.

Dispatchers.Main - пул из одного MAIN-потока.

Dispatchers.Main.immediate - см урок 23, там пример наглядный.

Dispatchers.Unconfined - такой диспетчер вообще не выполняет никаких переключений потоков. Корутина начинается
в потоке билдера и заканчивается в потоке последней suspend-функции.

По уроку 12.
--------------

Код родительской корутины выполняется сразу и не ждет выполнения дочерней. Если родительская корутина выполнила весь свой код,
это еще не значит, что она завершена. Это зависит от того, завершились ли ее дочерние корутины. Именно в этом проявляется связь
между родительской и дочерней корутинами. Где это используется? Например - при отмене корутин. Вызов метода cancel для родительской
корутины каскадно отменит и все ее дочерние корутины. Но метод cancel сработает только для корутины, которая еще не завершена. 
	
Запуск дочерней корутины в режиме Lazy: не смотря на то, что такая дочерняя корутина не запускается сразу после создания, связь
между ней и родительской корутиной создается сразу и родительская корутина следит за состоянием этой связи. И теперь родительская
корутина не сможет завершиться пока и дочерняя не заверншится.

По уроку 13.
-------------
Когда в корутине происходит исключение, которое не обернуто в try-catch, мы получаем крэш приложения.
Метод resumeWith вызывает invokeSuspend. Этот вызов обернут в try-catch. И если код в invokeSuspend (т.е. код корутины) выбросит исключение,
то оно будет перехвачено и сохранено, как результат работы корутины. Continuation передает этот результат в Job. Тем самым он сообщает, 
что завершил выполнение своего кода. Job проверяет, что ему пришло на вход. Он сообщает об ошибке родителю. Родитель (в нашем случае) - это
Job в scope. Узнав о том, что в его дочерней корутине произошла ошибка, он отменяет себя, а также все свои дочерние корутины.
Т.е. - все корутины, созданные в этом scope. Далее Job корутины (не job scope'а) пытается самостоятельно обработать исключение, которое он 
получил из Continuation. Для этого он проверяет свой контекст, есть ли там объект CoroutineExceptionHandler.

Итак, при ошибке в одной из корутин отменяются все остальные активные корутины скоупа. Иногда это нежелательно и вместо Job() нужно 
использовать SupervisorJob(). Он отличается от Job() тем, что не отменяет всех своих детей при возникновении ошибки в одном из них.

По уроку 16
-------------
suspendCancellableCoroutine - доделать

По уроку 17
-------------
coroutineScope {...} - это suspend функция. Она нужна для того, чтобы создать новый Scope и что-то там запустить, а также для того
чтобы запускать корутины в suspend-функциях. В обоих случаях эта функция приостанавливает код в своей родительской корутине
до тех пор пока не закончится вся работа внутри её блока !!! И кстати из-за того, что она ждет окончания работы своего блока - она
всегда видит все exception, которые там происходят.

Лучше делать так:
try {
       coroutineScope {
       }
   } catch (e: Exception) {

   }
   
NOTE: coroutineScope - это suspend функция, внутри которой запускается специальная корутина ScopeCoroutine. Код, который мы пишем 
в блоке coroutineScope, становится кодом этой корутины и выполняется именно в ней. Основная особенность ScopeCoroutine в том, что
она не передает ошибку родителю. То есть при ошибке она отменит себя и все дочерние корутины, но родителю ничего не сообщит, ОДНАКО
она вернет exception в создавшую её coroutineScope. Вот почему try/catch вокруг coroutineScope нужен.
   
withContext {...} - это coroutineScope с возможностью изменить контекст. Пример:  

launch {
   withContext(Dispatchers.Main) {
   }
}
Обычно мы используем его, чтобы вынести тяжелый синхронный код в фоновый поток.


runBlocking {...} - запускает новую корутину и БЛОКИРУЕТ поток своей родительской корутины до окончания работы своего блока кода.
То есть это НЕ suspend функция. Используется в тестировании.


По уроку 18 (Channels)
-----------------------

Channels - механизм обмена данными МЕЖДУ КОРУТИНАМИ. Создается Channel, одна корутина отправляет в него, вторая получает.
Функции отправки и получения являются suspend, то есть корутина, например, отправила, и если никто не ждет данных, то она
приостанавливает свой код.

По уроку 20 (Flow)
-------------------

Существуют 2 интерфейса: Flow и FlowCollector

Flow - генерит данные и отдает коллектору (FlowCollector). См метод Flow::collect
FlowCollector - принимает данные и что-то с ними делает, например работает как map или передает конечному получателю.

public interface Flow<out T> {
     public suspend fun collect(collector: FlowCollector<T>)
}

public interface FlowCollector<in T> {
   public suspend fun emit(value: T)
}

И есть ещё самостоятельная extension-функция Flow.collect{пользов_лямда}, которая связывает вместе Flow и FlowCollector.
Её задача:
- создать коллектор, у которого функция emit вызывает пользовательскую лямду, передавая в неё данные.
- запустить flowObj.collect(new_collector). Дело в том, что у flowObj есть extension-код для запуска на коллекторе, и 
в этом коде генерация данных и отправка их в emit.

suspend inline fun <T> Flow<T>.collect(crossinline action: suspend (value: T) -> Unit): Unit =
    collect(object : FlowCollector<T> {
        override suspend fun emit(value: T) = action(value)
    })

И вот вся эта фигня в целом работает следующим образом:	
	
val myFlow = flow {

  // this ==> collector

  val data1 = 1
  val data2 = 2
  this.emit(data1)
  this.emit(data2)
}

safeFlow.collect { data -> println(data) }
	
Оператор flow {} сначала создает SafeFlow, передавая ему лямду в конструктор.
А потом оператор safeFlow.collect {...} создаст новый FlowCollector и запустит на нем лямду из конструктора SafeFlow.
А эта лямда, как показано выше, генерит данные и отправляет их через emit в другую лямду { data -> println(data) }

Вообще получается что функция collect у интерфейса Flow нужна для того, чтобы "направить" генерируемые данные через
коллектор куда-то дальше. Это дальше зависит от того как фактически реализована emin у коллектора. Flow может м не
генерить данные сам (как показано выше). Главное чтобы они откуда-то брались.

NOTE: вызов emit является suspend, safeFlow.collect тоже suspend

Ещё вот так можно :))
------------------

flow {
  сидим на крышке коллектора, генерим данные и срём ими в коллектор (emit и всё такое)
}

someFlow.collect {
  сидим в коллекторе, и перебрасываем дерьмо в эту лямду
}


По уроку 23 (LiveData)
----------------------

Вот такая конструкция 

val liveData : LiveData<String> = liveData<String> {
   while (true) {
       delay(1000)
       emit("work")
   }
}

Видимо это так работает: билдер liveData где-то внутри себя создает Flow<String> вот такой:

flow {
   while (true) {
       delay(1000)
       emit("work")
   }
}

Назовем лямду у flow как flow_lamda. Также он создает LiveData и коллектор примерно такие:

val liveData = MutableLiveData<String>()

val collector = object: FlowCollector {
  fun emit(sz: String) {
     liveData.value = sz
  }
}

Теперь делается вот так: collector.flow_lamda() и данные из flow_lamda уходят в liveData.
Осталось вернуть результат 'return liveData as LiveData<String>'

А вообще можно легко превратить Flow в LiveData вот так: someFlow.asLiveData(). И всё !!!
-----------------------------------------------------------------------------------------

NOTE: Билдер liveData НЕ использует viewModelScope. Вместо этого он создает свой Scope, который
привязан к LifeCycle подписчика. Поэтому нужно помнить что: 
- ViewModel умирает когда закрывается связанный с ней экран, а значит останавливаются все корутины
  запущенные на её viewModelScope.
- Однако корутины, созданные билдером liveData{...} не связаны с ViewModel'ями, а зависят от 
  LifeCycle подписчиков.

По уроку 26 (полезная инфа по архитектуре)
------------------------------------------
Защита от нежелательных повторных вызовов корутин (например постоянно кликая на кнопку)

var getDataJob: Job? = null
 
fun getData() {
   if (getDataJob?.isActive == true) return
 
   getDataJob = viewModelScope.launch {
     .... получение данных
   }
}

По уроку 28
--------------
Вся разница между Flow и SharedFlow (StateFlow) сводится к разнице между cold и hot источниками данных.
SharedFlow может иметь несколько получателей (и отправителей) данных, и будет работать в одном экземпляре.
А обычный Flow будет создавать новый экземпляр себя под каждого нового подписчика. 

SharedFlow все время жив, готов принимать данные от отправителей и отдавать получателям. Поэтому
вызов sharedFlow.collect {..} никогда не завершится. Чтобы отписаться от SharedFlow нужно отменить
корутину внутри которой подписались. Кстати, у каждого подписчика свой collect {...}, то есть
любой код, который нужен подписчику.

Про StateFlow можно сказать, что он является частным случаем SharedFlow с определенными параметрами.
StateFlow это SharedFlow, который удобен для того, чтобы хранить в нем состояние чего-либо. Он всегда хранит 
в кэше одно (последнее полученное) значение, которое будет получать каждый новый подписчик. А вновь пришедшее 
значение всегда будет в буфере заменять старое. Важное отличие StateFlow от SharedFlow в том, что если 
отправитель шлет данные, которое равны предыдущим отправленным данным, то новые данные просто отбрасываются.












 	