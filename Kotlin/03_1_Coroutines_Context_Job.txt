interface CoroutineScope {
    val coroutineContext: CoroutineContext
}

interface CoroutineContext {
	interface Key<E : Element>
	
	interface Element : CoroutineContext {
		val key: Key<*>
	}
	
	. . . . прототипы методов для работы с элементами
}

Итак, CoroutineContext - это некое хранилище пар <Key, Element>

В свою очередь каждый Element - это тоже контекст. То есть контекст
является хранилищем других контекстов. Теперь смотрим сюда:

interface Job : CoroutineContext.Element {

	// Ключ для хранения Job внутри контекста. К companion object'у класса мы можем
	// обратиться по имени этого класса, а значит использовать ключ можно так: [Job]
	
	companion object Key : CoroutineContext.Key<Job> {...}

}

Job -->> Element -->> CoroutineContext

Job является элементом, а значит отдельным контекстом. То есть мы можем обратиться
к job'у как к контексту и по ключу [Job] 

------------------------------------------------------------------------

Вот смотрим как реализована корутина !!!
*******************************************


abstract class AbstractCoroutine<in T>( val parentContext: CoroutineContext, active: Boolean = true ) : JobSupport(active), Job, Continuation<T>, CoroutineScope {

    /**
     * NOTE: Этот context из имплементации Continuation !!!
     *	 
     * The context of this coroutine that includes this coroutine as a [Job].
     */
    public final override val context: CoroutineContext = parentContext + this   (!!!!! Обрати внимание к parentContext плюсуем КОРУТИНУ КАК КОНТЕКСТ !!!! А скорее всего добавляем job в [Job])

    /**
     * NOTE: Этот context из имплементации CoroutineScope !!! И он ТАКОЙ ЖЕ как предыдущий context из Continuation !!!
     *		 
     * The context of this scope which is the same as the [context] of this coroutine.
     */
    public override val coroutineContext: CoroutineContext get() = context
	
	. . . . .
	
	А есть ещё наследование от Job, который сам является контекстом. И видимо имплементация методов Job'а как раз и работает
	с context, рассмотренным выше !!!!
	
	Вот поэтому корутина ОДНОВРЕМЕННО и Scope и Context и Job !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}


val c1 = coroutine.context[Job] == coroutine (он же context)

	и получим, что c1 == coroutine == context
	поэтому следующая операция
	
val c2 = c1[Job] снова даст c2 == coroutine == context == с1

	и т.д. по кругу